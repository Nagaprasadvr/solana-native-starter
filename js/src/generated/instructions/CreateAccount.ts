/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateMyAccountIx,
  createMyAccountIxBeet,
} from '../types/CreateMyAccountIx'

/**
 * @category Instructions
 * @category CreateAccount
 * @category generated
 */
export type CreateAccountInstructionArgs = {
  createMyAccountIx: CreateMyAccountIx
}
/**
 * @category Instructions
 * @category CreateAccount
 * @category generated
 */
export const CreateAccountStruct = new beet.FixableBeetArgsStruct<
  CreateAccountInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['createMyAccountIx', createMyAccountIxBeet],
  ],
  'CreateAccountInstructionArgs'
)
/**
 * Accounts required by the _CreateAccount_ instruction
 *
 * @property [_writable_, **signer**] feePayerAcc
 * @property [_writable_, **signer**] newAcc
 * @property [] systemProgramAcc
 * @category Instructions
 * @category CreateAccount
 * @category generated
 */
export type CreateAccountInstructionAccounts = {
  feePayerAcc: web3.PublicKey
  newAcc: web3.PublicKey
  systemProgramAcc: web3.PublicKey
}

export const createAccountInstructionDiscriminator = 0

/**
 * Creates a _CreateAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateAccount
 * @category generated
 */
export function createCreateAccountInstruction(
  accounts: CreateAccountInstructionAccounts,
  args: CreateAccountInstructionArgs,
  programId = new web3.PublicKey('HHVuxvnj7X1KjCAp4iWBzLmTtYRhXHu1njK4x8eAsRRo')
) {
  const [data] = CreateAccountStruct.serialize({
    instructionDiscriminator: createAccountInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.feePayerAcc,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.newAcc,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgramAcc,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
